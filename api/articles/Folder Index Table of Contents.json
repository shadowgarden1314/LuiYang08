{"title":"15行python代码，助你为文件夹建立索引目录表","uid":"08f15989bd054a34d58b0ce3830bbc17","slug":"Folder Index Table of Contents","date":"2024-01-16T16:00:00.000Z","updated":"2024-01-18T02:47:24.920Z","comments":true,"path":"api/articles/Folder Index Table of Contents.json","keywords":null,"cover":"https://picx.zhimg.com/70/v2-d1ca22ee1df671b0fd4dc0c0844c7823_1440w.image?source=172ae18b&biz_tag=Post","content":"<p><img src=\"https://picx.zhimg.com/70/v2-d1ca22ee1df671b0fd4dc0c0844c7823_1440w.image?source=172ae18b&biz_tag=Post\" alt=\"15行python代码，助你为文件夹建立索引目录表\"></p>\n<h1 id=\"15行python代码，助你为文件夹建立索引目录表\"><a href=\"#15行python代码，助你为文件夹建立索引目录表\" class=\"headerlink\" title=\"15行python代码，助你为文件夹建立索引目录表\"></a>15行python代码，助你为文件夹建立索引目录表</h1><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">本文来自于</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/652159544\">知乎 15行python代码，助你为文件夹建立索引目录表</a><br>原作者编辑于 2023-08-25<br><strong>LuiYang</strong>已获得转载授权</p>\n</div>\n<p>平时，我们电脑文件夹里可能存放较多的文件，而文件一多，管理起来就非常麻烦。基于此考虑，我写了一个小的脚本，可以快速将文件夹下的所有文件，文件路径以及文件的超链接添加的一个excel表格里。需要哪个文件就在excel表里点击对应文件链接即可打开，非常的方便。</p>\n<h2 id=\"获取要创建文件链接表的路径\"><a href=\"#获取要创建文件链接表的路径\" class=\"headerlink\" title=\"获取要创建文件链接表的路径\"></a>获取要创建文件链接表的路径</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># 读取文件夹里的所有文件</span><br><span class=\"line\">docPath = &#x27;file&#x27;  # 要获取文件的文件夹</span><br><span class=\"line\">fileNames = os.listdir(docPath)  # 获取当前文件夹下的所有文件</span><br><span class=\"line\">print(fileNames)</span><br></pre></td></tr></table></figure>\n\n<p>打印输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;新建 Microsoft Excel 工作表 - 副本 (2).xlsx&#x27;, &#x27;新建 Microsoft Excel 工作表 - 副本.xlsx&#x27;, &#x27;新建 Microsoft Excel 工作表.xlsx&#x27;, &#x27;新建 Microsoft Word 文档 (2).docx&#x27;, &#x27;新建 Microsoft Word 文档.docx&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>如果需要对文件根据格式后缀进行区分，可以做一个条件筛选，只留下想要的文件类型。</p>\n<h2 id=\"获取所有文件的绝对路径\"><a href=\"#获取所有文件的绝对路径\" class=\"headerlink\" title=\"获取所有文件的绝对路径\"></a>获取所有文件的绝对路径</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filePaths = []  # 创建文件路径的保存列表</span><br><span class=\"line\">for filename in fileNames:  # 迭代文件名列表</span><br><span class=\"line\"> absPath = os.path.abspath(docPath)  # 获取文件夹的绝对路径</span><br><span class=\"line\"> filePaths.append(os.path.join(absPath, filename))  # 合并绝对路径和文件名</span><br></pre></td></tr></table></figure>\n\n<p>fileNames列表存放了文件夹下的所有文件名；filePaths列表存放了文件夹下所有文件的绝对路径。</p>\n<h2 id=\"创建dataframe\"><a href=\"#创建dataframe\" class=\"headerlink\" title=\"创建dataframe\"></a>创建dataframe</h2><p>用上面的两个列表创建成dataframe并添加对应列表的头名称。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.DataFrame([fileNames, filePaths]).T  # 将文件名称及文件路径列表转成dataframe </span><br><span class=\"line\">df.columns = [&#x27;文件名&#x27;, &#x27;文件路径&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>给dataframe增加超链接列，需要注意的是，HYPERLINK是excel里的函数。这里要文本的形式写入，生成excel文件后会自动识别这个函数。这里是把文件路径里面的路径通过HYPERLINK函数实现超链接的功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[&#x27;link&#x27;] = df[&#x27;文件路径&#x27;].apply(lambda x: f&#x27;=HYPERLINK(&quot;&#123;x&#125;&quot;)&#x27;)  # 给文件添加超链接列</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导出excel表格\"><a href=\"#导出excel表格\" class=\"headerlink\" title=\"导出excel表格\"></a>导出excel表格</h2><p>最后导出excel的汇总表，我这里以’文件汇总’来命名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.to_excel(&#x27;文件汇总.xlsx&#x27;, index=False)  # 导出文件</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic1.zhimg.com/80/v2-6521306af1cdb74905c8be6fd373a748_720w.webp\" alt=\"img\"></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-72e79c016d5e6caff8c328cd061b3aea_720w.webp\" alt=\"img\"></p>\n<p>点击link列下的单元格即可链接并打开相关的文件。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-383c74ee82d9323ce0424fc64e2886ae_720w.webp\" alt=\"img\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>完整代码如下。这部分代码只是实现最基本的功能，在此基础上可以做更多的拓展。如：</p>\n<p>1、通过os.walk函数可以遍历多层文件夹的所有文件，而不仅限于单个文件夹的所有文件；</p>\n<p>2、可以通过后缀过滤，筛选适当的文件类型的文件；</p>\n<p>3、留给读者，哈哈^_^；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># 读取文件夹里的所有文件</span><br><span class=\"line\">docPath = &#x27;file&#x27;  # 要获取文件的文件夹</span><br><span class=\"line\">fileNames = os.listdir(docPath)  # 获取当前文件夹下的所有文件</span><br><span class=\"line\">filePaths = []  # 创建文件路径的保存列表</span><br><span class=\"line\">for filename in fileNames:  # 迭代文件名列表</span><br><span class=\"line\"> absPath = os.path.abspath(docPath)  # 获取文件夹的绝对路径</span><br><span class=\"line\"> filePaths.append(os.path.join(absPath, filename))  # 合并绝对路径和文件名</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.DataFrame([fileNames, filePaths]).T  # 将文件名称及文件路径列表转成dataframe</span><br><span class=\"line\">df.columns = [&#x27;文件名&#x27;, &#x27;文件路径&#x27;]</span><br><span class=\"line\">df[&#x27;link&#x27;] = df[&#x27;文件路径&#x27;].apply(lambda x: f&#x27;=HYPERLINK(&quot;&#123;x&#125;&quot;)&#x27;)  # 给文件添加超链接列</span><br><span class=\"line\">df.to_excel(&#x27;文件汇总.xlsx&#x27;, index=False)  # 导出文件</span><br></pre></td></tr></table></figure>\n\n<p>文中有问题的内容请在评论区帮忙指出。</p>\n<p>有提速增效小工具需求的小伙伴也可以在评论区留言。</p>\n<hr>\n<h2 id=\"文件索引拓展，通过os-walk对文件夹进行遍历\"><a href=\"#文件索引拓展，通过os-walk对文件夹进行遍历\" class=\"headerlink\" title=\"文件索引拓展，通过os.walk对文件夹进行遍历\"></a>文件索引拓展，通过os.walk对文件夹进行遍历</h2><p>上面是通过os.listdir函数获取单个文件夹里面的所有文件。而对于多层文件目录的文件则不能进行深度遍历。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 读取文件夹里的所有文件 </span><br><span class=\"line\">docPath = &#x27;file&#x27;  # 要获取文件的文件夹 </span><br><span class=\"line\">fileNames = os.listdir(docPath)  # 获取当前文件夹下的所有文件 </span><br><span class=\"line\">print(fileNames)</span><br></pre></td></tr></table></figure>\n\n<p>考虑到这个问题，我把这部分代码作了优化，通过os.walk函数，对文件夹(包括多层文件夹)进行遍历，从而可以获取文件夹下面的所有文件，包括层层的文件夹。代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docType = &#x27;&#x27;  # 用于筛选文件类形</span><br><span class=\"line\">docAbsPath = os.path.abspath(&#x27;.&#x27;)  # 获取项目的绝对路径</span><br><span class=\"line\">fileNames, filePaths = [], []</span><br><span class=\"line\">for root, dirs, files in os.walk(docAbsPath):  # os.walk的遍历路径</span><br><span class=\"line\"> for file in files:</span><br><span class=\"line\"> if file.endswith(docType):  # 判断文件类型</span><br><span class=\"line\"> fileNames.append(file)  # 添加文件名到列表</span><br><span class=\"line\"> fileAbsPath = os.path.join(docAbsPath, root, file)  # 获取文件的绝对路径</span><br><span class=\"line\"> filePaths.append(fileAbsPath)  # 添加文件的绝对路径到列表</span><br></pre></td></tr></table></figure>\n\n<p>其中docType变量是用作文件类型的筛选，如果不需要筛选的话，直接以空字符代替即可。如果需要过滤特定类型的文件，如pdf文件，则docType &#x3D; ‘.docx’即可。</p>\n<p>下面以不过滤文件类型为例，遍历我的电脑D盘里的所有文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\tools\\Anaconda3\\python.exe D:\\os_walk_hyperlink.py </span><br><span class=\"line\">39.26338458061218</span><br></pre></td></tr></table></figure>\n\n<p>D:\\os_walk_hyperlink.py 为py代码文件执行路径，39.26338458061218为总执行耗时，单位为秒。执行完后在d盘会生成一个文件汇总的excel文件。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-9f84aa00ed9f17bd34894946bd4db257_720w.webp\" alt=\"img\"></p>\n<p>总共有52,7514行，差不多53万个文件，速度还是挺快的。如果对文件类型进行过滤，基本会在几秒钟就能输出索引表格。鼠标点击右边的文件路径，即可链接打开对应的文件，超级方便的。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-cc067f71fc9e38c05ef695d80f50b4f1_720w.webp\" alt=\"img\"></p>\n","feature":false,"text":"引用并“翻译”官方指南，分享我的经验和曾经遇到的问题，给那些跟我一样小白的人作为参考的文章。涉及如何编写hexo_aurora主题博客的markdown文章、如何设置博客布局、如何设置头图、如何添加各种插件等内容.........","permalink":"/post/Folder Index Table of Contents","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"study","slug":"study","count":6,"path":"api/categories/study.json"}],"tags":[{"name":"学习","slug":"学习","count":6,"path":"api/tags/学习.json"},{"name":"爬虫","slug":"爬虫","count":1,"path":"api/tags/爬虫.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#15%E8%A1%8Cpython%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8A%A9%E4%BD%A0%E4%B8%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E7%9B%AE%E5%BD%95%E8%A1%A8\"><span class=\"toc-text\">15行python代码，助你为文件夹建立索引目录表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E8%A6%81%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5%E8%A1%A8%E7%9A%84%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">获取要创建文件链接表的路径</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">获取所有文件的绝对路径</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAdataframe\"><span class=\"toc-text\">创建dataframe</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%87%BAexcel%E8%A1%A8%E6%A0%BC\"><span class=\"toc-text\">导出excel表格</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%B4%A2%E5%BC%95%E6%8B%93%E5%B1%95%EF%BC%8C%E9%80%9A%E8%BF%87os-walk%E5%AF%B9%E6%96%87%E4%BB%B6%E5%A4%B9%E8%BF%9B%E8%A1%8C%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">文件索引拓展，通过os.walk对文件夹进行遍历</span></a></li></ol></li></ol>","author":{"name":"LuiYang","slug":"blog-author","avatar":"/img/head.jpg","link":"/img/head.jpg","description":"<p>与其临渊羡鱼，不如退而结网</p>one should take practical steps achieve one's aim","socials":{"github":"https://github.com/LuiYang08","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13888214?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/luiyang"},"mail":{"icon":"/svg/mail.svg","link":"mailto:206614221@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://jq.qq.com/?_wv=1027&k=zYcHMcp1"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"关于求职和面试","uid":"9d69c1af95a558e065afefe188a85ab6","slug":"求职建议","date":"2023-10-31T13:27:35.000Z","updated":"2023-10-31T13:26:19.054Z","comments":true,"path":"api/articles/求职建议.json","keywords":null,"cover":"/img/photo-1.jpg","text":" 注意 本文为原创文章，转载请注明出处。仅供参考学习与研究计算机技术目的，请勿用于各种非法用途。 大专生求职记 本人撰写的求职日记，适用于广州求职人 面试技巧1、着装形象，其实极大部分公司完全没有要求，除非他们在招聘的时候就写了，又或者说你...","permalink":"/post/求职建议","photos":[],"count_time":{"symbolsCount":908,"symbolsTime":"1 mins."},"categories":[{"name":"work","slug":"work","count":2,"path":"api/categories/work.json"}],"tags":[{"name":"面试","slug":"面试","count":3,"path":"api/tags/面试.json"},{"name":"求职","slug":"求职","count":2,"path":"api/tags/求职.json"}],"author":{"name":"LuiYang","slug":"blog-author","avatar":"/img/head.jpg","link":"/img/head.jpg","description":"<p>与其临渊羡鱼，不如退而结网</p>one should take practical steps achieve one's aim","socials":{"github":"https://github.com/LuiYang08","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13888214?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/luiyang"},"mail":{"icon":"/svg/mail.svg","link":"mailto:206614221@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://jq.qq.com/?_wv=1027&k=zYcHMcp1"}}}},"feature":true},"next_post":{"title":"学习建议","uid":"af0796bc1f9f859cc896a7b3cb3c8db4","slug":"Study Tips","date":"2023-12-12T13:57:40.000Z","updated":"2023-12-12T13:57:26.471Z","comments":true,"path":"api/articles/Study Tips.json","keywords":null,"cover":"/img/photo-2.jpg","text":"我个人对计算机知识的一些学习技巧以及方法，还有一些常用的网站之类的，让大伙见笑了。仅供参考~...","permalink":"/post/Study Tips","photos":[],"count_time":{"symbolsCount":846,"symbolsTime":"1 mins."},"categories":[{"name":"study","slug":"study","count":6,"path":"api/categories/study.json"}],"tags":[{"name":"学习","slug":"学习","count":6,"path":"api/tags/学习.json"}],"author":{"name":"LuiYang","slug":"blog-author","avatar":"/img/head.jpg","link":"/img/head.jpg","description":"<p>与其临渊羡鱼，不如退而结网</p>one should take practical steps achieve one's aim","socials":{"github":"https://github.com/LuiYang08","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13888214?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/luiyang"},"mail":{"icon":"/svg/mail.svg","link":"mailto:206614221@qq.com"},"qq":{"icon":"/svg/qq.svg","link":"https://jq.qq.com/?_wv=1027&k=zYcHMcp1"}}}},"feature":false}}